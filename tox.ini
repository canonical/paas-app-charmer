# Copyright 2024 Canonical Ltd.
# See LICENSE file for licensing details.

[tox]
skipsdist=True
envlist = lint, unit, static, coverage-report
skip_missing_interpreters = True

[vars]
src_path = {toxinidir}/paas_app_charmer/
example_path = {toxinidir}/examples/
tst_path = {toxinidir}/tests/
all_path = {[vars]src_path} {[vars]example_path} {[vars]tst_path}

[testenv]
setenv =
  PYTHONPATH={toxinidir}:{toxinidir}/examples/flask/src:{toxinidir}/examples/flask/lib
  PYTHONBREAKPOINT=ipdb.set_trace
  PY_COLORS=1
passenv =
  PYTHONPATH
  CHARM_BUILD_DIR
  MODEL_SETTINGS

[testenv:fmt]
description = Apply coding style standards to code
deps =
    black
    isort
commands =
    isort {[vars]all_path}
    black {[vars]all_path} --target-version=py310

[testenv:lint]
description = Check code against coding style standards
deps =
    black
    codespell
    flake8-builtins
    flake8-copyright
    flake8-docstrings-complete>=1.0.4
    flake8-docstrings>=1.6.0
    flake8-test-docs
    flake8
    isort
    types-requests
    types-PyYAML
    mypy
    pep8-naming
    pydocstyle
    pylint
    pyproject-flake8
    pytest_operator
    types-requests
    types-PyYAML
    -r{toxinidir}/requirements.txt
    -r{toxinidir}/tests/integration/flask/requirements.txt
commands =
    codespell {toxinidir} \
      --skip {toxinidir}/.git \
      --skip {toxinidir}/.tox \
      --skip {toxinidir}/build \
      --skip {toxinidir}/lib \
      --skip {toxinidir}/venv \
      --skip {toxinidir}/.mypy_cache \
      --skip {toxinidir}/examples/django/charm/lib \
      --skip {toxinidir}/examples/flask/lib \
      --skip {toxinidir}/tests/integration/.mypy_cache
    # pflake8 wrapper supports config from pyproject.toml
    pflake8 {[vars]src_path}
    isort --check-only --diff {[vars]all_path}
    black --target-version=py310 --check --diff {[vars]all_path}
    mypy {[vars]src_path}
    pydocstyle {[vars]src_path}
    pylint {[vars]src_path} --min-similarity-lines=10

[testenv:static]
description = Run static analysis tests
deps =
    bandit[toml]
    -r{toxinidir}/requirements.txt
commands =
    bandit -c {toxinidir}/pyproject.toml -r {[vars]src_path} {[vars]tst_path}

[testenv:unit]
description = Run unit tests
deps =
    cosl
    pytest
    coverage[toml]
    -r{toxinidir}/requirements.txt
commands =
    coverage run --source={[vars]src_path} \
        -m pytest --ignore={[vars]tst_path}integration -v --tb native -s {posargs}
    coverage report

[testenv:coverage-report]
description = Create test coverage report
deps =
    pytest
    coverage[toml]
    -r{toxinidir}/requirements.txt
commands =
    coverage report

[testenv:integration]
description = Run integration tests
deps =
    cosl
    boto3
    juju==3.1.2.0
    git+https://github.com/canonical/saml-test-idp.git
    -r{toxinidir}/requirements.txt
    -r{toxinidir}/tests/integration/flask/requirements.txt
commands =
    pytest -v --tb native --ignore={[vars]tst_path}unit --log-cli-level=INFO -s {posargs}

[testenv:src-docs]
allowlist_externals=sh
setenv =
    PYTHONPATH = {toxinidir}:{toxinidir}/lib:{[vars]src_path}
description = Generate documentation for src
deps =
    lazydocs
    -r{toxinidir}/requirements.txt
commands =
    ; can't run lazydocs directly due to needing to run it on src/* which produces an invocation error in tox
    sh generate-src-docs.sh
